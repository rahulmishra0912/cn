********ECHOSERVER***********

***SERVER

#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include<arpa/inet.h>
#include<stdlib.h>
#include<unistd.h>


#define BUFLEN                 1024        /* buffer length */

int main(int argc, char **argv)
{
        int n;
	int yes=1;
        int sd, new_sd, client_len, port;
        struct sockaddr_in server, client;
        char  buf[BUFLEN];

         port = atoi(argv[1]);
     
        /* create a stream socket */
        if((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
        {
                fprintf(stderr,"can't create a socket\n");
                exit(1);
        }

        /* Fill the structure fileds with values */

        server.sin_family = AF_INET;
        server.sin_port = port;
        server.sin_addr.s_addr =inet_addr("127.0.0.1");
	
       // Reuse the port and address
	if (setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes)) == -1) {
    		perror("setsockopt");
   		 exit(1);
	}

        /* bind an address to the socket */
        if(bind(sd, (struct sockaddr *)&server, sizeof(server)) == -1)
        {
                fprintf(stderr, "can't bind name to socket\n");
                exit(1);
        }

        /* queue up to 5 connect requests */
        listen(sd,5);

        while(1)
        {
                client_len = sizeof(client);

                if((new_sd = accept(sd, (struct sockaddr *) &client, &client_len)) == -1)
                {
                        fprintf(stderr, "can't accept client \n");
                        exit(1);
                }

                n = read(new_sd, buf, sizeof(buf));
		printf("The message  received by client : %s\n",buf); 
                write(new_sd, buf,n);
 		close(new_sd);
        }

        close(sd);
        return(0);
}

******CLIENT

#include <stdio.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <unistd.h>


#define  BUFLEN                   1024                 /* buffer length */

int main(int argc, char **argv)
{
        int n;
        int sd, port;
        char buf[BUFLEN];
        
       struct sockaddr_in server;
     
       port=atoi(argv[1]);

        /* create a stream socket */
        if(( sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
        {
                fprintf(stderr, "can't create a socket\n");
                exit(1);
        }

       // bzero((char *)&server, sizeof(struct sockaddr_in));
        server.sin_family = AF_INET;
        server.sin_port = port;
        server.sin_addr.s_addr = inet_addr("127.0.0.1");


        /* connecting to the server */
        if(connect(sd, (struct sockaddr *)&server, sizeof(server)) == -1)
        {
                fprintf(stderr, "can't connect\n");
                exit(1);
        }

        printf("Enter the message to be echoed: ");       
        scanf("%s",buf);                /* get user's text */
        write(sd, buf, BUFLEN);        /* send it out */
        printf("Echoed Messege:\n**************\n");
       
        n = read(sd, buf, sizeof(buf));
        printf("%s\n",buf); 
      
       close(sd);
       return(0); 
}


************CHAT APPLN**********

*******SERVER


#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
 #include<arpa/inet.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>

#define SERVER_TCP_PORT  5000   /* well known port */
#define BUFLEN                 256        /* buffer length */
#define MAX 80
int flag=0;

int func(int sockfd)
{
char buff[MAX];
int n;

for(;;)
{
if(flag==1)
  break;
bzero(buff,MAX);
n=read(sockfd,buff,sizeof(buff));
printf("Message from client is:%s",buff);
bzero(buff,MAX);
n=0;
//while((buff[n++]=getchar())!='\n');
printf("Enter message to be sent to client:\n");
fgets(buff,sizeof(buff),stdin);
n=strlen(buff); 
if(strncmp("exit",buff,4)==0)
{
printf("Server Exit ...\n");
flag=1;
break;
}
else
{
write(sockfd,buff,sizeof(buff));
bzero(buff,MAX);
}

} // for loop
 
}


int main(int argc, char **argv)
{
        int n;
	int yes=1;
        int sd, new_sd, client_len, port;
        struct sockaddr_in server, client;
        char  buff[BUFLEN];

         port = atoi(argv[1]);
 // port=5750;
     
        /* create a stream socket */
        if((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
        {
                fprintf(stderr,"can't create a socket\n");
                exit(1);
        }

        /* bind an address to the socket */
        // bzero((char *)&server, sizeof(struct sockaddr_in));
        server.sin_family = AF_INET;
        server.sin_port = port;
        server.sin_addr.s_addr =htonl(INADDR_ANY);
	
	if (setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes)) == -1) {
    		perror("setsockopt");
   		 exit(1);
	}

        if(bind(sd, (struct sockaddr *)&server, sizeof(server)) == -1)
        {
                fprintf(stderr, "can't bind name to socket\n");
                exit(1);
        }

        /* queue up to 5 connect requests */
        listen(sd,5);

        while(1)
        {
                client_len = sizeof(client);

                if((new_sd = accept(sd, (struct sockaddr *) &client, &client_len)) == -1)
                {
                        fprintf(stderr, "can't accept client\n");
                        exit(1);
                }
    
                func(new_sd);
 		close(new_sd);
        }


        close(sd);
        return(0);
}



********CLIENT

#include <stdio.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include<arpa/inet.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>

#define  BUFLEN                   256                 /* buffer length */
#define MAX 80

void func(int sockfd)
{
char buff[MAX];
int n;
for(;;)
{
bzero(buff,sizeof(buff));
printf("Enter the message to be sent: ");
n=0;
fgets(buff,sizeof(buff),stdin);
if((strncmp(buff,"exit",4))==0)
{
printf("Client Exit...\n");
break;
}
n=strlen(buff);
write(sockfd,buff,n);
bzero(buff,sizeof(buff));
read(sockfd,buff,sizeof(buff));
printf("Message from Server : %s",buff);

}
}


int main(int argc, char **argv)
{
        int n;
        int sd, port;
        char buff[BUFLEN];
        
       struct sockaddr_in server;
     //command line argument
       port=atoi(argv[1]);
        /* create a stream socket */
        if(( sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
        {
                fprintf(stderr, "can't create a socket\n");
                exit(1);
        }

       // bzero((char *)&server, sizeof(struct sockaddr_in));
        server.sin_family = AF_INET;
        server.sin_port = port;
        server.sin_addr.s_addr = inet_addr("127.0.0.1");


        /* connecting to the server */
        if(connect(sd, (struct sockaddr *)&server, sizeof(server)) == -1)
        {
                fprintf(stderr, "can't connect\n");
                exit(1);
        }
  
       func(sd);    
       close(sd);
        return(0); 
}



*****************FTP*********************

******SERVER****************************

#include <sys/socket.h>
#include <netinet/in.h>				
#include <string.h>
#include <stdio.h>
#include <stdlib.h>			//Headers to use network parameters
#include<fcntl.h>
#include <dirent.h>
DIR *d;    					
DIR *d2,*d1;
struct dirent *dir,*dir2,*dir1;			


int LOGIN_FLAG;
int main(int argc,char *argv[])
{
  struct sockaddr_in server, client;
  int sock1, sock2;
  char buf[100],buf1[100],buf3[100],command[100], filename[20];
  int k, i, size, len, c;
  sock1 = socket(AF_INET, SOCK_STREAM, 0);       	//Socket creation	
  if(sock1 == -1)
    {
      printf("Socket creation failed");
      exit(1);
    }

  server.sin_family = AF_INET;
  server.sin_port = atoi(argv[1]);
  server.sin_addr.s_addr = inet_addr("127.0.0.1");
  k = bind(sock1,(struct sockaddr*)&server,sizeof(server)); //Bind Socket
  if(k == -1)
    {
      printf("Binding error");
      exit(1);
    }
  k = listen(sock1,1);					//Server ready to listen
  if(k == -1)
    {
      printf("Listen failed");
      exit(1);
    }
  len = sizeof(client);
sock2 = accept(sock1,(struct sockaddr*)&client, &len);//accept the connection
  i = 1;



   LOGIN_FLAG=0;

   while(1){

	char u[50],p[50],username[50],password[50];

	strcpy(buf3,"login_please");		//Server request client to login
        send(sock2, buf3, 100, 0);

	recv(sock2, buf, 100, 0);
	strcpy(u,buf);
	//printf("\n%s\n",buf);
	recv(sock2, buf, 100, 0);	
	strcpy(p,buf);
	//printf("\n%s\n",buf);
	
	FILE *fp;
	FILE *fp1;
	char fileread[200];
	fp =fopen("database.txt","r");
	while(!feof(fp)){
		fscanf(fp,"%s\t%s\n",username,password);
		if(!strcmp(u,username) && !strcmp(p,password)){
			LOGIN_FLAG=1;		//Check for client authentication
		}
	}
	if(LOGIN_FLAG==1){

		strcpy(buf3,"true");
        	send(sock2, buf3, 100, 0);
		recv(sock2, buf, 100, 0);
		fp1 =fopen(buf,"r");	
		if(fp1==NULL)
		{
		send(sock2,"error",5,0);	//Requested file not available
		close(sock2);
		}
		while(fgets(fileread,sizeof(fileread),fp1))	
		{
		printf("%s\n",fileread);	
		if(send(sock2,fileread,sizeof(fileread),0)<0)
		{
		printf("Cant send\n");
		}
		sleep(1);
		}
		if(!fgets(fileread,sizeof(fileread),fp1))
		{
		char msg[20];
		strcpy(msg,"completed");
		send(sock2,msg,sizeof(msg),0);	//Send the requested file
		}						

	}else{

		strcpy(buf3,"false");		//Authentication failed
        	send(sock2, buf3, 100, 0);
	}
}
}


************************CLIENT*****************************************

  #include <sys/socket.h>  
    #include <netinet/in.h>
    #include <string.h>
    #include <stdio.h>
  
    #include <stdlib.h>


	int LOGIN_FLAG=0;
    int main(int argc,char *argv[])
    {
      struct sockaddr_in server;
    
      int sock;
      int choice;
      char buf[100], buf3[100],command[100],cmd[50],next[50];
      int k, size, status;
      int filehandle;

      sock = socket(AF_INET, SOCK_STREAM, 0);          //Create Socket   
      if(sock == -1)
        {
          printf("socket creation failed");
          exit(1);
        }
      server.sin_family = AF_INET;
      server.sin_port = atoi(argv[1]);
      server.sin_addr.s_addr = inet_addr("127.0.0.1");
					//Connect to client 					
      k = connect(sock,(struct sockaddr*)&server, sizeof(server));  
      if(k == -1)
        {
          printf("Connect Error");
          exit(1);
        }
    LOGIN_FLAG=0;
	int s;
	FILE *fp;
    char user[50],pass[50],fname[20];
    while(1)
	{
		
		recv(sock, buf, 100, 0);
		if(!strcmp(buf,"login_please")){
			printf("\nUsername : ");
			scanf("%s",user);
			printf("\nPassword : ");
			scanf("%s",pass);
			
			strcpy(buf,user);
			send(sock, buf, 100, 0);
			strcpy(buf,pass);		//Authentication
			send(sock, buf, 100, 0);

			recv(sock, buf, 100, 0);
			if(!strcmp(buf,"true")){
				LOGIN_FLAG=1;
				printf("\nLogin Successfull !\n");
				printf("Enter the file name\n");
				scanf("%s",fname);    	//Login Successful
				strcpy(buf,fname);
				fp=fopen(fname,"a");
				send(sock, buf, 100, 0);
				while(1)
				{
				s=recv(sock,buf,100,0);
				buf[s]='\0';
				if(strcmp(buf,"error")==0)
				printf("File is not available\n");
				if(strcmp(buf,"completed")==0)
				{
				printf("File is transferred........\n");
				//fclose(fp);	//File transferred
				close(sock);
				break;
				}
				else
				fputs(buf,stdout);
				fprintf(fp,"%s",buf);
				}
			}else if(!strcmp(buf,"false")){	  //Authentication failed
				printf("\nInvalid Try Again !\n");
			}
		}
}
}
			 
			
			
********************************HAMMING****************

*****************SERVER****************

#include<stdio.h>
#include<stdlib.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<netinet/in.h>
int main(){
int network_socket;
char buf[100];
char buf1[100];
network_socket=socket(AF_INET,SOCK_STREAM,0);
struct sockaddr_in server_address;
server_address.sin_family=AF_INET;
server_address.sin_port=htons(9014);
server_address.sin_addr.s_addr=INADDR_ANY;
int binding;
binding=bind(network_socket, (struct sockaddr *)&server_address, sizeof(server_address));
if(binding==-1){
printf("error in binding");
}
listen(network_socket,5);
int client_socket;
client_socket=accept(network_socket,NULL,NULL);
//hamming code
int data[10],i;
printf("Please input 4 bits of data\n");
scanf("%d",&data[0]);
scanf("%d",&data[1]);
scanf("%d",&data[2]);
scanf("%d",&data[4]);

//calculation of encoded data to clients
data[6] = data[4]^data[2]^data[0];
data[5] = data[4]^data[1]^data[0];
data[3] = data[0]^data[2]^data[1];

//sending the encoded data to clients
int n;
for(i=0;i<7;i++)
{
	n = write(client_socket,&data[i],sizeof(int)); 
	if(n<0)
		printf("Error while transmitting the data");
}

printf("The data sent is: ");
for(i=0;i<7;i++)
	printf("%d",data[i]);

close(client_socket);
close(network_socket);
return 0;
}


****************CLIENT***********************

#include<stdio.h>
#include<stdlib.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<netinet/in.h>

int main(){
int network_socket;
network_socket=socket(AF_INET,SOCK_STREAM,0);
struct sockaddr_in server_address;
server_address.sin_family=AF_INET;
server_address.sin_port=htons(9014);
server_address.sin_addr.s_addr=INADDR_ANY;

int connection;
connection=connect(network_socket, (struct sockaddr *) &server_address,sizeof(server_address));
if(connection==-1)
{
printf("error in connect function\n");
exit(0);

}
char buf[100];
char buf1[100];

//hamming code
int data[10];
int test[10];
int p,p1,p2,p4,n,i;

printf("The data received is: ");
for(i=0;i<7;i++)
{
	n =read(network_socket,&data[i],sizeof(int));
	if(n<0)
		printf("Error on receiving data	");
		printf("%d",data[i]);
}

printf("Please enter the data to be tested");
for(i=0;i<7;i++)
	scanf("%d",&test[i]);

p1 = test[6]^test[4]^test[2]^test[0];
p2 = test[5]^test[4]^test[1]^test[0];
p4 = test[3]^test[0]^test[2]^test[1];

p = (4*p4) + (2*p2) + p1;

printf("The data for testing is:");
for(i=0;i<7;i++)
	printf("%d",test[i]);

if(p == 0)
{
	printf("No error in data");
}
else
{
	printf("\nThe error is at position %d",p);
	printf("The correct data is:");
	if(test[7-p] ==0)
		test[7-p]=1;
	else
		test[7-p]=0;
	for(i=0;i<7;i++)
		printf("%d",test[i]);
	
}


close(network_socket);
return 0;
}


*********************************PACKETSNIFFER********************************************************************************


#include<netinet/in.h>
#include<errno.h>
#include<netdb.h>
#include<stdio.h> //For standard things
#include<stdlib.h>    //malloc
#include<string.h>    //strlen
 
#include<netinet/ip_icmp.h>   //Provides declarations for icmp header
#include<netinet/udp.h>   //Provides declarations for udp header
#include<netinet/tcp.h>   //Provides declarations for tcp header
#include<netinet/ip.h>    //Provides declarations for ip header
#include<netinet/if_ether.h>  //For ETH_P_ALL
#include<net/ethernet.h>  //For ether_header
#include<sys/socket.h>
#include<arpa/inet.h>
#include<sys/ioctl.h>
#include<sys/time.h>
#include<sys/types.h>
#include<unistd.h>
 
void ProcessPacket(unsigned char* , int);
void print_ip_header(unsigned char* , int);
void print_tcp_packet(unsigned char * , int );
void print_udp_packet(unsigned char * , int );
void print_icmp_packet(unsigned char* , int );
void PrintData (unsigned char* , int);
 
FILE *logfile;
struct sockaddr_in source,dest;
int tcp=0,udp=0,icmp=0,others=0,igmp=0,total=0,i,j; 
 
int main()
{
    int saddr_size , data_size;
    struct sockaddr saddr;
         
    unsigned char *buffer = (unsigned char *) malloc(65536); //Its Big!
     
    logfile=fopen("log.txt","w");
    if(logfile==NULL) 
    {
        printf("Unable to create log.txt file.");
    }
    printf("Starting...\n");
     
    int sock_raw = socket( AF_PACKET , SOCK_RAW , htons(ETH_P_ALL)) ;
    //setsockopt(sock_raw , SOL_SOCKET , SO_BINDTODEVICE , "eth0" , strlen("eth0")+ 1 );
     
    if(sock_raw < 0)
    {
        //Print the error with proper message
        perror("Socket Error");
        return 1;
    }
    while(1)
    {
        saddr_size = sizeof saddr;
        //Receive a packet
        data_size = recvfrom(sock_raw , buffer , 65536 , 0 , &saddr , (socklen_t*)&saddr_size);
        if(data_size <0 )
        {
            printf("Recvfrom error , failed to get packets\n");
            return 1;
        }
        //Now process the packet
        ProcessPacket(buffer , data_size);
    }
    close(sock_raw);
    printf("Finished");
    return 0;
}
 
void ProcessPacket(unsigned char* buffer, int size)
{
    //Get the IP Header part of this packet , excluding the ethernet header
    struct iphdr *iph = (struct iphdr*)(buffer + sizeof(struct ethhdr));
    ++total;
    switch (iph->protocol) //Check the Protocol and do accordingly...
    {
        case 1:  //ICMP Protocol
            ++icmp;
            print_icmp_packet( buffer , size);
            break;
         
        case 2:  //IGMP Protocol
            ++igmp;
            break;
         
        case 6:  //TCP Protocol
            ++tcp;
            print_tcp_packet(buffer , size);
            break;
         
        case 17: //UDP Protocol
            ++udp;
            print_udp_packet(buffer , size);
            break;
         
        default: //Some Other Protocol like ARP etc.
            ++others;
            break;
    }
    printf("TCP : %d   UDP : %d   ICMP : %d   IGMP : %d   Others : %d   Total : %d\r", tcp , udp , icmp , igmp , others , total);
}
 
void print_ethernet_header(unsigned char* Buffer, int Size)
{
    struct ethhdr *eth = (struct ethhdr *)Buffer;
     
    fprintf(logfile , "\n");
    fprintf(logfile , "Ethernet Header\n");
    fprintf(logfile , "   |-Destination Address : %.2X-%.2X-%.2X-%.2X-%.2X-%.2X \n", eth->h_dest[0] , eth->h_dest[1] , eth->h_dest[2] , eth->h_dest[3] , eth->h_dest[4] , eth->h_dest[5] );
    fprintf(logfile , "   |-Source Address      : %.2X-%.2X-%.2X-%.2X-%.2X-%.2X \n", eth->h_source[0] , eth->h_source[1] , eth->h_source[2] , eth->h_source[3] , eth->h_source[4] , eth->h_source[5] );
    fprintf(logfile , "   |-Protocol            : %u \n",(unsigned short)eth->h_proto);
}
 
void print_ip_header(unsigned char* Buffer, int Size)
{
    print_ethernet_header(Buffer , Size);
   
    unsigned short iphdrlen;
         
    struct iphdr *iph = (struct iphdr *)(Buffer  + sizeof(struct ethhdr) );
    iphdrlen =iph->ihl*4;
     
    memset(&source, 0, sizeof(source));
    source.sin_addr.s_addr = iph->saddr;
     
    memset(&dest, 0, sizeof(dest));
    dest.sin_addr.s_addr = iph->daddr;
     
    fprintf(logfile , "\n");
    fprintf(logfile , "IP Header\n");
    fprintf(logfile , "   |-IP Version        : %d\n",(unsigned int)iph->version);
    fprintf(logfile , "   |-IP Header Length  : %d DWORDS or %d Bytes\n",(unsigned int)iph->ihl,((unsigned int)(iph->ihl))*4);
    fprintf(logfile , "   |-Type Of Service   : %d\n",(unsigned int)iph->tos);
    fprintf(logfile , "   |-IP Total Length   : %d  Bytes(Size of Packet)\n",ntohs(iph->tot_len));
    fprintf(logfile , "   |-Identification    : %d\n",ntohs(iph->id));
    //fprintf(logfile , "   |-Reserved ZERO Field   : %d\n",(unsigned int)iphdr->ip_reserved_zero);
    //fprintf(logfile , "   |-Dont Fragment Field   : %d\n",(unsigned int)iphdr->ip_dont_fragment);
    //fprintf(logfile , "   |-More Fragment Field   : %d\n",(unsigned int)iphdr->ip_more_fragment);
    fprintf(logfile , "   |-TTL      : %d\n",(unsigned int)iph->ttl);
    fprintf(logfile , "   |-Protocol : %d\n",(unsigned int)iph->protocol);
    fprintf(logfile , "   |-Checksum : %d\n",ntohs(iph->check));
    fprintf(logfile , "   |-Source IP        : %s\n",inet_ntoa(source.sin_addr));
    fprintf(logfile , "   |-Destination IP   : %s\n",inet_ntoa(dest.sin_addr));
}
 
void print_tcp_packet(unsigned char* Buffer, int Size)
{
    unsigned short iphdrlen;
     
    struct iphdr *iph = (struct iphdr *)( Buffer  + sizeof(struct ethhdr) );
    iphdrlen = iph->ihl*4;
     
    struct tcphdr *tcph=(struct tcphdr*)(Buffer + iphdrlen + sizeof(struct ethhdr));
             
    int header_size =  sizeof(struct ethhdr) + iphdrlen + tcph->doff*4;
     
    fprintf(logfile , "\n\n***********************TCP Packet*************************\n");  
         
    print_ip_header(Buffer,Size);
         
    fprintf(logfile , "\n");
    fprintf(logfile , "TCP Header\n");
    fprintf(logfile , "   |-Source Port      : %u\n",ntohs(tcph->source));
    fprintf(logfile , "   |-Destination Port : %u\n",ntohs(tcph->dest));
    fprintf(logfile , "   |-Sequence Number    : %u\n",ntohl(tcph->seq));
    fprintf(logfile , "   |-Acknowledge Number : %u\n",ntohl(tcph->ack_seq));
    fprintf(logfile , "   |-Header Length      : %d DWORDS or %d BYTES\n" ,(unsigned int)tcph->doff,(unsigned int)tcph->doff*4);
    //fprintf(logfile , "   |-CWR Flag : %d\n",(unsigned int)tcph->cwr);
    //fprintf(logfile , "   |-ECN Flag : %d\n",(unsigned int)tcph->ece);
    fprintf(logfile , "   |-Urgent Flag          : %d\n",(unsigned int)tcph->urg);
    fprintf(logfile , "   |-Acknowledgement Flag : %d\n",(unsigned int)tcph->ack);
    fprintf(logfile , "   |-Push Flag            : %d\n",(unsigned int)tcph->psh);
    fprintf(logfile , "   |-Reset Flag           : %d\n",(unsigned int)tcph->rst);
    fprintf(logfile , "   |-Synchronise Flag     : %d\n",(unsigned int)tcph->syn);
    fprintf(logfile , "   |-Finish Flag          : %d\n",(unsigned int)tcph->fin);
    fprintf(logfile , "   |-Window         : %d\n",ntohs(tcph->window));
    fprintf(logfile , "   |-Checksum       : %d\n",ntohs(tcph->check));
    fprintf(logfile , "   |-Urgent Pointer : %d\n",tcph->urg_ptr);
    fprintf(logfile , "\n");
    fprintf(logfile , "                        DATA Dump                         ");
    fprintf(logfile , "\n");
         
    fprintf(logfile , "IP Header\n");
    PrintData(Buffer,iphdrlen);
         
    fprintf(logfile , "TCP Header\n");
    PrintData(Buffer+iphdrlen,tcph->doff*4);
         
    fprintf(logfile , "Data Payload\n");    
    PrintData(Buffer + header_size , Size - header_size );
                         
    fprintf(logfile , "\n###########################################################");
}
 
void print_udp_packet(unsigned char *Buffer , int Size)
{
     
    unsigned short iphdrlen;
     
    struct iphdr *iph = (struct iphdr *)(Buffer +  sizeof(struct ethhdr));
    iphdrlen = iph->ihl*4;
     
    struct udphdr *udph = (struct udphdr*)(Buffer + iphdrlen  + sizeof(struct ethhdr));
     
    int header_size =  sizeof(struct ethhdr) + iphdrlen + sizeof udph;
     
    fprintf(logfile , "\n\n***********************UDP Packet*************************\n");
     
    print_ip_header(Buffer,Size);           
     
    fprintf(logfile , "\nUDP Header\n");
    fprintf(logfile , "   |-Source Port      : %d\n" , ntohs(udph->source));
    fprintf(logfile , "   |-Destination Port : %d\n" , ntohs(udph->dest));
    fprintf(logfile , "   |-UDP Length       : %d\n" , ntohs(udph->len));
    fprintf(logfile , "   |-UDP Checksum     : %d\n" , ntohs(udph->check));
     
    fprintf(logfile , "\n");
    fprintf(logfile , "IP Header\n");
    PrintData(Buffer , iphdrlen);
         
    fprintf(logfile , "UDP Header\n");
    PrintData(Buffer+iphdrlen , sizeof udph);
         
    fprintf(logfile , "Data Payload\n");    
     
    //Move the pointer ahead and reduce the size of string
    PrintData(Buffer + header_size , Size - header_size);
     
    fprintf(logfile , "\n###########################################################");
}
 
void print_icmp_packet(unsigned char* Buffer , int Size)
{
    unsigned short iphdrlen;
     
    struct iphdr *iph = (struct iphdr *)(Buffer  + sizeof(struct ethhdr));
    iphdrlen = iph->ihl * 4;
     
    struct icmphdr *icmph = (struct icmphdr *)(Buffer + iphdrlen  + sizeof(struct ethhdr));
     
    int header_size =  sizeof(struct ethhdr) + iphdrlen + sizeof icmph;
     
    fprintf(logfile , "\n\n***********************ICMP Packet*************************\n"); 
     
    print_ip_header(Buffer , Size);
             
    fprintf(logfile , "\n");
         
    fprintf(logfile , "ICMP Header\n");
    fprintf(logfile , "   |-Type : %d",(unsigned int)(icmph->type));
             
    if((unsigned int)(icmph->type) == 11)
    {
        fprintf(logfile , "  (TTL Expired)\n");
    }
    else if((unsigned int)(icmph->type) == ICMP_ECHOREPLY)
    {
        fprintf(logfile , "  (ICMP Echo Reply)\n");
    }
     
    fprintf(logfile , "   |-Code : %d\n",(unsigned int)(icmph->code));
    fprintf(logfile , "   |-Checksum : %d\n",ntohs(icmph->checksum));
    //fprintf(logfile , "   |-ID       : %d\n",ntohs(icmph->id));
    //fprintf(logfile , "   |-Sequence : %d\n",ntohs(icmph->sequence));
    fprintf(logfile , "\n");
 
    fprintf(logfile , "IP Header\n");
    PrintData(Buffer,iphdrlen);
         
    fprintf(logfile , "UDP Header\n");
    PrintData(Buffer + iphdrlen , sizeof icmph);
         
    fprintf(logfile , "Data Payload\n");    
     
    //Move the pointer ahead and reduce the size of string
    PrintData(Buffer + header_size , (Size - header_size) );
     
    fprintf(logfile , "\n###########################################################");
}
 
void PrintData (unsigned char* data , int Size)
{
    int i , j;
    for(i=0 ; i < Size ; i++)
    {
        if( i!=0 && i%16==0)   //if one line of hex printing is complete...
        {
            fprintf(logfile , "         ");
            for(j=i-16 ; j<i ; j++)
            {
                if(data[j]>=32 && data[j]<=128)
                    fprintf(logfile , "%c",(unsigned char)data[j]); //if its a number or alphabet
                 
                else fprintf(logfile , "."); //otherwise print a dot
            }
            fprintf(logfile , "\n");
        } 
         
        if(i%16==0) fprintf(logfile , "   ");
            fprintf(logfile , " %02X",(unsigned int)data[i]);
                 
        if( i==Size-1)  //print the last spaces
        {
            for(j=0;j<15-i%16;j++) 
            {
              fprintf(logfile , "   "); //extra spaces
            }
             
            fprintf(logfile , "         ");
             
            for(j=i-i%16 ; j<=i ; j++)
            {
                if(data[j]>=32 && data[j]<=128) 
                {
                  fprintf(logfile , "%c",(unsigned char)data[j]);
                }
                else
                {
                  fprintf(logfile , ".");
                }
            }
             
            fprintf(logfile ,  "\n" );
        }
    }
}

***************************************************************************CRC******************************

**************************SERVER***********************

#include<stdio.h>
#include<string.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<netdb.h>



void strrev(char * text){
	//not implemented in gcc so had to include||not a part of solution offcourse
	int l;
	int r;
	char temp;

	for(r=strlen(text)-1,l=0;r>l;l++,r--)
	{
		temp=text[l];
		text[l]=text[r];
		text[r]=temp;
	}
}


void XOR(char * i1,char *i2){
    int i;


    for(i=0;i<strlen(i2);i++){
        if(i1[i]==i2[i]){
            i1[i]='0';
        }
        else{
            i1[i]='1';
        }
    }
}


char * remainder(char * b,char *size){
	char *remainder;	

	remainder = strdup(b);

	

	while(strlen(remainder)!=strlen(size)-1){
	
	if(remainder[0]=='1')
		XOR(remainder,size);
	strrev(remainder);
	remainder[strlen(remainder)-1]='\0';
	strrev(remainder);
	}
	
	return remainder;

}



int main(int argc, char **argv)
{
        int n;
	int yes=1;
        int sd, new_sd, client_len, port;
        struct sockaddr_in server, client;
        

         port = atoi(argv[1]);
     
        /* create a stream socket */
        if((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
        {
                fprintf(stderr,"can't create a socket\n");
                exit(1);
        }

        /* Fill the structure fileds with values */

        server.sin_family = AF_INET;
        server.sin_port = port;
        server.sin_addr.s_addr =INADDR_ANY;
	
       // Reuse the port and address
	if (setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes)) == -1) {
    		perror("setsockopt");
   		 exit(1);
	}

        /* bind an address to the socket */
        if(bind(sd, (struct sockaddr *)&server, sizeof(server)) == -1)
        {
                fprintf(stderr, "can't bind name to socket\n");
                exit(1);
        }

        /* queue up to 5 connect requests */
        listen(sd,5);
        int p;
        int b[100];
        int size[100];
	int message[100];
	
        
        
        
                client_len = sizeof(client);

                if((new_sd = accept(sd, (struct sockaddr *) &client, &client_len)) == -1)
                {
                        fprintf(stderr, "can't accept client \n");
                        exit(1);
                }
                p=read(new_sd,size,sizeof(size));
                
                n = read(new_sd,b,sizeof(b));
               
                
                
            sprintf(message,"%d", atoi(remainder(b,size))  );
    	if(atoi(message)==0)
      		printf("\n\nNO ERROR IN TRANSMISSION\n\n");
    	else
      		printf("\n\nERROR DETECTED");

 		close(new_sd);
        

        close(sd);
        return(0);
}


********************CLIENT**************************

#include <stdio.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <unistd.h>

void strrev(char * text){//not implemented in gcc so had to include||not a part of solution offcourse
	int l;
	int r;
	char temp;

	for(r=strlen(text)-1,l=0;r>l;l++,r--)
	{
		temp=text[l];
		text[l]=text[r];
		text[r]=temp;
	}
}


void XOR(char * i1,char *i2){
    int i;


    for(i=0;i<strlen(i2);i++){
        if(i1[i]==i2[i]){
            i1[i]='0';
        }
        else{
            i1[i]='1';
        }
    }
}

void append(char *input,char *divisor){
	int i;
 	int l;

	l = strlen(input);

	for(i=0;i<strlen(divisor)-1;i++){
		input[l+i]='0';
	}	
	
	input[l+i]='\0';
}

char * remainder(char * input,char *divisor){
	char *remainder;	

	remainder = strdup(input);

	

	while(strlen(remainder)!=strlen(divisor)-1){
	
	if(remainder[0]=='1')
		XOR(remainder,divisor);
	strrev(remainder);
	remainder[strlen(remainder)-1]='\0';
	strrev(remainder);
	}
	
	return remainder;

}



int main(int argc, char **argv)
{
       
        int sd, port;
        
       char input[100],divisor[100];
	
	char message[100];
        
       struct sockaddr_in server;
     
       port=atoi(argv[1]);

        
        if(( sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
        {
                fprintf(stderr, "can't create a socket\n");
                exit(1);
        }

       
        server.sin_family = AF_INET;
        server.sin_port = port;
        server.sin_addr.s_addr = inet_addr("127.0.0.1");
        int m,i;

        /* connecting to the server */
        if(connect(sd, (struct sockaddr *)&server, sizeof(server)) == -1)
        {
                fprintf(stderr, "can't connect\n");
                exit(1);
        }

       printf("Enter the input : \n");
	scanf("%s",input);
	
	printf("Enter the divisor : \n");
	scanf("%s",divisor);
	m=strlen(divisor);
	append(input,divisor);
	sprintf(message,"%d", atoi(input)+atoi(remainder(input,divisor))  );
	printf("%s\n",message);	
        write(sd,divisor,sizeof(divisor));
         
        write(sd,message,sizeof(message));
        
        
      
       close(sd);
       return(0); 
}



**********************************CHECKSUM**********************************************************

**************************SERVER***************************

#include<stdio.h>
#include<string.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<netdb.h>


#define BUFLEN                 1024        /* buffer length */
int receiver(int c[10],int k,int scheck)
{
int checksum,sum=0,i;
     	printf("\n\n****RECEIVER****\n");
     	for(i=0;i<k;i++)
      	sum+=c[i];
      	printf(" RECEIVER SUM IS:%d",sum);
      	sum=sum+scheck;
      	checksum=~sum;
      	printf("\nRECEIVER's CHECKSUM IS:%d",checksum);
      		return checksum;
  }

int main(int argc, char **argv)
{
        int n;
	int yes=1;
        int sd, new_sd, client_len, port;
        struct sockaddr_in server, client;
        char  buf[BUFLEN];

         port = atoi(argv[1]);
     
        /* create a stream socket */
        if((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
        {
                fprintf(stderr,"can't create a socket\n");
                exit(1);
        }

        /* Fill the structure fileds with values */

        server.sin_family = AF_INET;
        server.sin_port = port;
        server.sin_addr.s_addr =INADDR_ANY;
	
       // Reuse the port and address
	if (setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes)) == -1) {
    		perror("setsockopt");
   		 exit(1);
	}

        /* bind an address to the socket */
        if(bind(sd, (struct sockaddr *)&server, sizeof(server)) == -1)
        {
                fprintf(stderr, "can't bind name to socket\n");
                exit(1);
        }

        /* queue up to 5 connect requests */
        listen(sd,5);
        int m,result,p,j;
        int b[10];
        int size;
        int rcheck;
        
        
                client_len = sizeof(client);

                if((new_sd = accept(sd, (struct sockaddr *) &client, &client_len)) == -1)
                {
                        fprintf(stderr, "can't accept client \n");
                        exit(1);
                }
                p=read(new_sd,&size,sizeof(size));
                //size=(int)size;
               // printf("%d\n",size);
                n = read(new_sd,b,sizeof(b));
               
		m=read(new_sd,&rcheck,sizeof(rcheck));
                //printf("%d",rcheck);
                //rcheck=(int)rcheck;
                
            result=receiver(b,size,rcheck);
    	if(result==0)
      		printf("\n\nNO ERROR IN TRANSMISSION\n\n");
    	else
      		printf("\n\nERROR DETECTED");



               // write(new_sd, buf,n);
 		close(new_sd);
        

        close(sd);
        return(0);
}

********************CLIENT**************************

#include <stdio.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <unistd.h>


#define  BUFLEN                   1024                 /* buffer length */
int sender(int b[10],int k)
 {
 	int checksum,sum=0,i;
        	printf("\n****SENDER****\n");
     
for(i=0;i<k;i++)
      		sum+=b[i];
      		printf("SUM IS: %d",sum);
                     
    	checksum=~sum;
    	printf("\nSENDER's CHECKSUM IS:%d\n",checksum+1);
    	return checksum;
}

int main(int argc, char **argv)
{
        int n;
        int sd, port;
        char buf[BUFLEN];
       int a[10];
int scheck;
        
       struct sockaddr_in server;
     
       port=atoi(argv[1]);

        /* create a stream socket */
        if(( sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
        {
                fprintf(stderr, "can't create a socket\n");
                exit(1);
        }

       // bzero((char *)&server, sizeof(struct sockaddr_in));
        server.sin_family = AF_INET;
        server.sin_port = port;
        server.sin_addr.s_addr = inet_addr("127.0.0.1");
        int m,i;

        /* connecting to the server */
        if(connect(sd, (struct sockaddr *)&server, sizeof(server)) == -1)
        {
                fprintf(stderr, "can't connect\n");
                exit(1);
        }

       printf("\nENTER SIZE OF THE STRING:");
     	scanf("%d",&m);
     	printf("\nENTER THE ELEMENTS OF THE ARRAY:");
     	for(i=0;i<m;i++)
    	scanf("%d",&a[i]);
        write(sd,&m,sizeof(m));
        //for(i=0;i<m;i++){               /* get user's text */
        //strcat(buf,a[i]);}

        write(sd,a,sizeof(a));        /* send it out */
        scheck=sender(a,m);
        write(sd,&scheck,sizeof(scheck));
        
        //n = read(sd, buf, sizeof(buf));
        //printf("%s\n",buf); 
      
       close(sd);
       return(0); 
}

